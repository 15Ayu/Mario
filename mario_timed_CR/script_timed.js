const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// „Ç≤„Éº„É†Ë®≠ÂÆö
const GRAVITY = 0.5;
const PLAYER_SPEED = 5;
const JUMP_POWER = 12;
const COIN_SCORE = 100;
const STAGE_LENGTH = 12000; // „Çπ„ÉÜ„Éº„Ç∏„ÅÆÂÖ®Èï∑

// „Ç≤„Éº„É†„ÅÆÁä∂ÊÖã
let gameState = 'playing';
let score = 0;
let scrollOffset = 0;
let lastPlatformX = 0;
let lastObstacleX = 0;

// GamepadÈñ¢ÈÄ£„ÅÆÂ§âÊï∞
let gamepad = null;
let gamepadConnected = false;
let gamepadButtons = {
    left: false,   // Â∑¶„Éú„Çø„É≥ÔºàEnterÔºâ
    right: false,  // Âè≥„Éú„Çø„É≥Ôºà„Ç∏„É£„É≥„ÉóÔºâ
    leftPressed: false,
    rightPressed: false
};

// Êñ∞„Åó„ÅÑ„Ç≤„Éº„É†„É¢„Éº„ÉâÈñ¢ÈÄ£„ÅÆÂ§âÊï∞ (timed„É¢„Éº„ÉâÁî®)
let gameMode = 'timed'; // „Åì„ÅÆ„Éï„Ç°„Ç§„É´„ÅØtimed„É¢„Éº„Éâ
let startTime = 0;
let remainingTime = 0; // Âà∂ÈôêÊôÇÈñìÁî®
let timerInterval = null; // „Çø„Ç§„Éû„Éº„ÅÆID

// --- „ÇØ„É©„ÇπÂÆöÁæ© ---
class Player {
    constructor() {
        this.position = { x: 100, y: 100 };
        this.velocity = { x: 0, y: 0 };
        this.width = 30;
        this.height = 50;
    }
    draw(offset) { ctx.fillStyle = 'red'; ctx.fillRect(this.position.x - offset, this.position.y, this.width, this.height); }
    applyGravity() { this.velocity.y += GRAVITY; }
}

class Platform {
    constructor({ x, y, width }) { this.position = { x, y }; this.width = width; this.height = 30; }
    draw(offset) {
        drawBrickPattern(this.position.x, this.position.y, this.width, this.height, offset);
    }
}

class Coin {
    constructor({ x, y }) { this.position = { x, y }; this.radius = 15; this.active = true; }
    draw(offset) { if (!this.active) return; ctx.fillStyle = 'gold'; ctx.beginPath(); ctx.arc(this.position.x - offset, this.position.y, this.radius, 0, Math.PI * 2); ctx.fill(); }
}

class Enemy {
    constructor({ x, y, platform }) { this.position = { x, y }; this.velocity = { x: -2, y: 0 }; this.width = 40; this.height = 40; this.patrolRange = { left: platform.position.x, right: platform.position.x + platform.width - this.width }; }
    draw(offset) { ctx.fillStyle = 'purple'; ctx.fillRect(this.position.x - offset, this.position.y, this.width, this.height); }
    update() { this.position.x += this.velocity.x; if (this.position.x <= this.patrolRange.left || this.position.x >= this.patrolRange.right) { this.velocity.x *= -1; } }
}

class Obstacle {
    constructor({ x, y }) { this.position = { x, y }; this.velocity = { x: -3, y: 0 }; this.width = 50; this.height = 50; }
    draw(offset) { ctx.fillStyle = 'brown'; ctx.fillRect(this.position.x - offset, this.position.y, this.width, this.height); }
    update() { this.position.x += this.velocity.x; }
}

class Goal {
    constructor({ x, y }) { this.position = { x, y }; this.width = 10; this.height = 100; }
    draw(offset) { ctx.fillStyle = 'black'; ctx.fillRect(this.position.x - offset, this.position.y, this.width, this.height); ctx.fillStyle = 'blue'; ctx.beginPath(); ctx.moveTo(this.position.x - offset + this.width, this.position.y); ctx.lineTo(this.position.x - offset + this.width + 40, this.position.y + 20); ctx.lineTo(this.position.x - offset + this.width, this.position.y + 40); ctx.closePath(); ctx.fill(); }
}

class Cloud {
    constructor({ x, y, size }) { this.position = { x, y }; this.size = size; }
    draw(offset) {
        ctx.fillStyle = 'white';
        ctx.beginPath();
        ctx.arc(this.position.x - offset * 0.5, this.position.y, this.size, 0, Math.PI * 2);
        ctx.arc(this.position.x - offset * 0.5 + this.size, this.position.y, this.size, 0, Math.PI * 2);
        ctx.arc(this.position.x - offset * 0.5 - this.size, this.position.y, this.size, 0, Math.PI * 2);
        ctx.fill();
    }
}

// --- Â§âÊï∞ÂÆöÁæ© ---
let player, platforms, coins, enemies, obstacles, goal, clouds;
let keys = { right: { pressed: false }, left: { pressed: false } };

// --- ÂàùÊúüÂåñ ---
function init() {
    gameState = 'playing';
    score = 0;
    scrollOffset = 0;
    keys.right.pressed = false;
    keys.left.pressed = false;
    player = new Player();
    platforms = [new Platform({ x: 0, y: 450, width: 500 })];
    goal = new Goal({ x: STAGE_LENGTH, y: 350 });
    coins = []; enemies = []; obstacles = []; clouds = [];
    lastPlatformX = 500;
    lastObstacleX = 700;
    for (let i = 0; i < 20; i++) { // 20ÂÄã„ÅÆÈõ≤„ÇíÁîüÊàê
        clouds.push(new Cloud({ x: Math.random() * STAGE_LENGTH, y: Math.random() * 150, size: Math.random() * 20 + 10 }));
    }

    // timed„É¢„Éº„Éâ„ÅÆÂàùÊúüÂåñ
    startTime = Date.now();
    if (timerInterval) clearInterval(timerInterval); // Êó¢Â≠ò„ÅÆ„Çø„Ç§„Éû„Éº„Åå„ÅÇ„Çå„Å∞„ÇØ„É™„Ç¢

    remainingTime = 60; // 60Áßí
    timerInterval = setInterval(() => {
        if (gameState === 'playing') {
            remainingTime--;
            if (remainingTime <= 0) {
                gameState = 'gameOver';
                clearInterval(timerInterval);
            }
        }
    }, 1000);
}

// --- ËÉåÊôØÊèèÁîª ---
function drawBackground(offset) {
    // Á©∫
    ctx.fillStyle = '#70c5ce'; // style.css„Åã„ÇâÁßªÂãï„Åó„ÅüÁ©∫Ëâ≤
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // ËøëÊôØ„ÅÆÂú∞Èù¢ (ÈÄü„Åè„Çπ„ÇØ„É≠„Éº„É´)
    ctx.fillStyle = '#5C4033'; // ÁÑ¶Ëå∂Ëâ≤
    const groundScrollOffset = offset * 0.7; // ËøëÊôØ„ÅØÈÄü„Åè
    ctx.fillRect(0 - groundScrollOffset % canvas.width, 400, canvas.width * 2, canvas.height - 400);
}

// „É¨„É≥„Ç¨ÊüÑ„ÇíÊèèÁîª„Åô„Çã„Éò„É´„Éë„ÉºÈñ¢Êï∞
function drawBrickPattern(x, y, width, height, offset) {
    const brickWidth = 40;
    const brickHeight = 20;
    const brickGap = 4;
    const brickColor1 = '#A0522D'; // „Ç∑„Ç®„Éä
    const brickColor2 = '#8B4513'; // „Çµ„Éâ„É´„Éñ„É©„Ç¶„É≥

    ctx.save();
    ctx.beginPath();
    ctx.rect(x - offset, y, width, height);
    ctx.clip(); // ÊèèÁîªÁØÑÂõ≤„Çí„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†„ÅÆÈ†òÂüü„Å´ÈôêÂÆö

    for (let i = 0; i * brickHeight < height; i++) {
        let rowOffset = (i % 2) * (brickWidth / 2); // ‰∫í„ÅÑÈÅï„ÅÑ„Å´„Åô„Çã„Åü„ÇÅ„ÅÆ„Ç™„Éï„Çª„ÉÉ„Éà
        for (let j = 0; j * brickWidth < width + brickWidth; j++) {
            const brickX = x - offset + j * brickWidth + rowOffset;
            const brickY = y + i * brickHeight;

            ctx.fillStyle = (j + i) % 2 === 0 ? brickColor1 : brickColor2;
            ctx.fillRect(brickX + brickGap / 2, brickY + brickGap / 2, brickWidth - brickGap, brickHeight - brickGap);
        }
    }
    ctx.restore();
}

// --- „É°„ÉÉ„Çª„Éº„Ç∏„Éª„Çπ„Ç≥„Ç¢ÊèèÁîª ---
function drawMessage(message, subMessage, finalScore) {
    ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.fillStyle = 'white';
    ctx.textAlign = 'center';
    ctx.font = '60px sans-serif';
    ctx.fillText(message, canvas.width / 2, canvas.height / 2 - 60);
    if (finalScore !== undefined) {
        ctx.font = '30px sans-serif';
        ctx.fillText(`„Çπ„Ç≥„Ç¢: ${finalScore}`, canvas.width / 2, canvas.height / 2);
    }
    if (gameMode === 'timed' && gameState === 'gameOver') {
        ctx.font = '24px sans-serif';
        ctx.fillText(`ÊôÇÈñìÂàá„ÇåÔºÅ`, canvas.width / 2, canvas.height / 2 + 20);
    }
    ctx.font = '24px sans-serif';
    ctx.fillText(subMessage, canvas.width / 2, canvas.height / 2 + 50);
}

function drawScore() {
    ctx.fillStyle = 'black';
    ctx.font = '24px sans-serif';
    ctx.textAlign = 'left';
    ctx.fillText(`„Çπ„Ç≥„Ç¢: ${score}`, 20, 40);
    if (gameMode === 'timed') {
        ctx.fillText(`ÊÆã„ÇäÊôÇÈñì: ${remainingTime}Áßí`, 20, 70);
    }
    
    // „Ç≥„É≥„Éà„É≠„Éº„É©„ÉºÊé•Á∂öÁä∂ÊÖã„ÅÆË°®Á§∫
    if (gamepadConnected) {
        ctx.fillStyle = 'green';
        ctx.font = '16px sans-serif';
        ctx.fillText('„Ç≥„É≥„Éà„É≠„Éº„É©„ÉºÊé•Á∂ö‰∏≠', 20, 100);
    } else {
        ctx.fillStyle = 'red';
        ctx.font = '16px sans-serif';
        ctx.fillText('„Ç≥„É≥„Éà„É≠„Éº„É©„ÉºÊú™Êé•Á∂ö', 20, 100);
    }
}

// „Ç≥„É≥„Éà„É≠„Éº„É©„ÉºÁä∂ÊÖãË°®Á§∫Áî®„ÅÆÈñ¢Êï∞
function showGamepadStatus(message, type) {
    const statusElement = document.getElementById('gamepadStatus');
    if (statusElement) {
        statusElement.textContent = message;
        statusElement.style.color = type === 'success' ? 'green' : 'red';
    }
    console.log(message);
}

// „Éá„Éê„ÉÉ„Ç∞Áî®Ôºö„Ç≥„É≥„Éà„É≠„Éº„É©„ÉºÊÉÖÂ†±„ÇíË°®Á§∫
function debugGamepadInfo() {
    console.log("=== „Ç≤„Éº„É†„Éë„ÉÉ„ÉâÁä∂ÊÖã„ÉÅ„Çß„ÉÉ„ÇØ ===");
    
    // Gamepad API„ÅÆ„Çµ„Éù„Éº„ÉàÁä∂Ê≥Å„Çí„ÉÅ„Çß„ÉÉ„ÇØ
    if (!navigator.getGamepads) {
        console.log("‚ùå „Åì„ÅÆ„Éñ„É©„Ç¶„Ç∂„ÅØGamepad API„Çí„Çµ„Éù„Éº„Éà„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì");
        console.log("Êé®Â•®„Éñ„É©„Ç¶„Ç∂: Chrome, Firefox, Edge");
        return [];
    }
    
    const gamepads = navigator.getGamepads();
    let connectedCount = 0;
    let actualGamepads = [];
    
    console.log("„Éñ„É©„Ç¶„Ç∂:", navigator.userAgent);
    console.log("Gamepad API „Çµ„Éù„Éº„Éà: ‚úì");
    console.log("Á∑è„Çπ„É≠„ÉÉ„ÉàÊï∞:", gamepads.length);
    
    for (let i = 0; i < gamepads.length; i++) {
        if (gamepads[i]) {
            if (gamepads[i].connected) {
                connectedCount++;
                actualGamepads.push(gamepads[i]);
                console.log(`‚úì Êé•Á∂öÊ∏à„Åø„Ç≤„Éº„É†„Éë„ÉÉ„Éâ ${i}:`, {
                    id: gamepads[i].id,
                    connected: gamepads[i].connected,
                    buttons: gamepads[i].buttons.length,
                    axes: gamepads[i].axes.length,
                    mapping: gamepads[i].mapping
                });
            } else {
                console.log(`‚úó Êú™Êé•Á∂ö„Çπ„É≠„ÉÉ„Éà ${i}:`, gamepads[i].id || "‰∏çÊòé");
            }
        }
    }
    
    console.log(`ÂÆüÈöõ„Å´Êé•Á∂ö„Åï„Çå„Å¶„ÅÑ„Çã„Ç≥„É≥„Éà„É≠„Éº„É©„ÉºÊï∞: ${connectedCount}`);
    
    if (connectedCount === 0) {
        console.log("‚ö†Ô∏è „Ç≥„É≥„Éà„É≠„Éº„É©„Éº„ÅåÊé•Á∂ö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì");
        console.log("Ë©≥Á¥∞„Å™Êé•Á∂öÊâãÈ†Ü:");
        
        // MacÁî®„ÅÆÁâπÂà•„Å™ÊâãÈ†Ü
        if (navigator.platform.includes('Mac')) {
            console.log("üçé MacÁî®„ÅÆÊé•Á∂öÊâãÈ†Ü:");
            console.log("1. XBOX360„Ç≥„É≥„Éà„É≠„Éº„É©„Éº„ÇíUSB„Ç±„Éº„Éñ„É´„ÅßÊé•Á∂ö");
            console.log("2. „Ç∑„Çπ„ÉÜ„É†Áí∞Â¢ÉË®≠ÂÆö > „Ç≤„Éº„É†„Ç≥„É≥„Éà„É≠„Éº„É©„Éº„ÅßË™çË≠ò„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç");
            console.log("3. „Ç≥„É≥„Éà„É≠„Éº„É©„Éº„ÅÆXbox„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶Êé•Á∂ö„ÇíÂÆâÂÆöÂåñ");
            console.log("4. „Åì„ÅÆ„Éö„Éº„Ç∏„ÇíÊõ¥Êñ∞„Åô„Çã");
            console.log("5. Êé•Á∂ö„Åå‰∏çÂÆâÂÆö„Å™Â†¥Âêà:");
            console.log("   - „Ç≥„É≥„Éà„É≠„Éº„É©„Éº„Çí‰∏ÄÂ∫¶Êäú„ÅÑ„Å¶ÂÜçÂ∫¶Êé•Á∂ö");
            console.log("   - Safari„Éñ„É©„Ç¶„Ç∂„ÇíË©¶„ÅôÔºàMac„ÅßÊúÄ„ÇÇÂÆâÂÆöÔºâ");
            console.log("   - „Ç∑„Çπ„ÉÜ„É†Áí∞Â¢ÉË®≠ÂÆö„Åß„Ç≥„É≥„Éà„É≠„Éº„É©„Éº„ÇíÂâäÈô§„Åó„Å¶ÂÜçË™çË≠ò");
        } else {
            console.log("1. XBOX360„Ç≥„É≥„Éà„É≠„Éº„É©„Éº„ÇíUSB„Ç±„Éº„Éñ„É´„ÅßÊé•Á∂ö");
            console.log("2. Windows„ÅÆÂ†¥Âêà: „Éá„Éê„Ç§„Çπ„Éû„Éç„Éº„Ç∏„É£„Éº„Åß„Ç≥„É≥„Éà„É≠„Éº„É©„Éº„ÅåË™çË≠ò„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç");
            console.log("3. „Ç≥„É≥„Éà„É≠„Éº„É©„Éº„ÅÆ‰ªªÊÑè„ÅÆ„Éú„Çø„É≥„ÇíÊäº„ÅôÔºàXbox„Éú„Çø„É≥„ÄÅA„Éú„Çø„É≥„Å™„Å©Ôºâ");
            console.log("4. „Åì„ÅÆ„Éö„Éº„Ç∏„ÇíÊõ¥Êñ∞„Åô„Çã");
            console.log("5. „Åù„Çå„Åß„ÇÇÊé•Á∂ö„Åï„Çå„Å™„ÅÑÂ†¥Âêà:");
            console.log("   - Chrome„Éñ„É©„Ç¶„Ç∂„Çí‰ΩøÁî®");
            console.log("   - „Éñ„É©„Ç¶„Ç∂„ÇíÂÆåÂÖ®„Å´ÂÜçËµ∑Âãï");
            console.log("   - „Ç≥„É≥„Éà„É≠„Éº„É©„Éº„ÅÆ„Éâ„É©„Ç§„Éê„Éº„ÇíÊõ¥Êñ∞");
        }
    }
    
    return actualGamepads;
}

// --- „Ç™„Éñ„Ç∏„Çß„ÇØ„ÉàÁîüÊàê ---
function generateObjects() {
    // „Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†„Å®‰ªòÈöè„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅÆÁîüÊàê
    while (lastPlatformX < scrollOffset + canvas.width + 200 && lastPlatformX < STAGE_LENGTH) {
        const gap = Math.random() * 200 + 100;
        const width = Math.random() * 250 + 150;
        const newX = lastPlatformX + gap;
        const newY = Math.random() * 250 + 200;
        const platform = new Platform({ x: newX, y: newY, width: width });
        platforms.push(platform);
        const rand = Math.random();
        if (rand < 0.8) { coins.push(new Coin({ x: newX + width / 2, y: newY - 40 }));
        } else if (rand < 0.95) { enemies.push(new Enemy({ x: newX + width / 2, y: newY - 40, platform: platform })); }
        lastPlatformX = newX + width;
    }
    // ÊµÆÈÅäÈöúÂÆ≥Áâ©„ÅÆÁîüÊàê
    while (lastObstacleX < scrollOffset + canvas.width + 200 && lastObstacleX < STAGE_LENGTH) {
        const gap = Math.random() * 400 + 400;
        const newX = lastObstacleX + gap;
        const newY = Math.random() * (canvas.height - 150) + 50;
        obstacles.push(new Obstacle({ x: newX, y: newY }));
        lastObstacleX = newX;
    }
}

// --- „Ç≤„Éº„É†„É´„Éº„Éó ---
function animate() {
    requestAnimationFrame(animate);

    // Gamepad„ÅÆÂÖ•ÂäõÂá¶ÁêÜ
    const gamepads = navigator.getGamepads ? navigator.getGamepads() : [];
    let connectedGamepad = null;
    
    // ÂÆüÈöõ„Å´Êé•Á∂ö„Åï„Çå„Å¶„ÅÑ„Çã„Ç≤„Éº„É†„Éë„ÉÉ„Éâ„ÇíÊé¢„ÅôÔºàMac„Åß„ÅÆ‰∏çÂÆâÂÆö„Å™Êé•Á∂ö„Å´ÂØæÂøúÔºâ
    for (let i = 0; i < gamepads.length; i++) {
        if (gamepads[i] && gamepads[i].connected && gamepads[i].id) {
            // Mac„Åß„ÅÆXBOX360„Ç≥„É≥„Éà„É≠„Éº„É©„Éº„ÇíÁâπÂà•„Å´„ÉÅ„Çß„ÉÉ„ÇØ
            if (gamepads[i].id.includes('STANDARD GAMEPAD') || 
                gamepads[i].id.includes('Xbox') || 
                gamepads[i].id.includes('045e')) {
                connectedGamepad = gamepads[i];
                break;
            }
        }
    }
    
    if (connectedGamepad) {
        gamepad = connectedGamepad;
        if (!gamepadConnected) {
            gamepadConnected = true;
            showGamepadStatus("„Ç≥„É≥„Éà„É≠„Éº„É©„Éº„ÅåÊé•Á∂ö„Åï„Çå„Åæ„Åó„Åü", "success");
        }
        
        // Â∑¶„Çπ„ÉÜ„Ç£„ÉÉ„ÇØ„ÅÆXËª∏ÔºàÁßªÂãïÔºâ
        const xAxis = gamepad.axes[0];
        if (xAxis < -0.5) { // Â∑¶„Å´ÂÄí„Åô
            keys.left.pressed = true;
            keys.right.pressed = false;
        } else if (xAxis > 0.5) { // Âè≥„Å´ÂÄí„Åô
            keys.right.pressed = true;
            keys.left.pressed = false;
        } else { // „Éã„É•„Éº„Éà„É©„É´
            keys.left.pressed = false;
            keys.right.pressed = false;
        }

        // Âè≥„Éú„Çø„É≥ÔºàB„Éú„Çø„É≥„ÄÅ„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ1Ôºâ„Åß„Ç∏„É£„É≥„Éó
        if (gamepad.buttons[1] && gamepad.buttons[1].pressed) {
            if (!gamepadButtons.rightPressed && gameState === 'playing' && player.velocity.y === 0) {
                player.velocity.y = -JUMP_POWER;
                gamepadButtons.rightPressed = true;
            }
        } else {
            gamepadButtons.rightPressed = false;
        }

        // Â∑¶„Éú„Çø„É≥ÔºàX„Éú„Çø„É≥„ÄÅ„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ2Ôºâ„ÅßEnter
        if (gamepad.buttons[2] && gamepad.buttons[2].pressed) {
            if (!gamepadButtons.leftPressed) {
                if (gameState !== 'playing') {
                    init(); // „Ç≤„Éº„É†„É™„Çπ„Çø„Éº„Éà
                }
                gamepadButtons.leftPressed = true;
            }
        } else {
            gamepadButtons.leftPressed = false;
        }
    } else {
        if (gamepadConnected) {
            gamepadConnected = false;
            showGamepadStatus("„Ç≥„É≥„Éà„É≠„Éº„É©„Éº„ÅåÂàáÊñ≠„Åï„Çå„Åæ„Åó„Åü", "error");
        }
        gamepad = null;
    }

    if (gameState === 'playing') {
        // 1. ÂÖ•Âäõ
        if (keys.right.pressed) player.velocity.x = PLAYER_SPEED; else if (keys.left.pressed) player.velocity.x = -PLAYER_SPEED; else player.velocity.x = 0;
        
        // 2. Êõ¥Êñ∞
        player.applyGravity();
        player.position.x += player.velocity.x;
        player.position.y += player.velocity.y;
        enemies.forEach(e => e.update());
        obstacles.forEach(o => o.update());

        // 3. Ë°ùÁ™ÅÂà§ÂÆö
        // YËª∏: Âú∞Èù¢
        if (player.position.y + player.height > canvas.height) {
            player.velocity.y = 0;
            player.position.y = canvas.height - player.height;
        }
        // YËª∏: Â§©‰∫ï
        if (player.position.y < 0) { player.position.y = 0; player.velocity.y = 0; }

        // Ë∂≥Â†¥„Å®„ÅÆË°ùÁ™ÅÂà§ÂÆö („Ç∏„É£„É≥„Éó„Çπ„É´„Éº)
        platforms.forEach(p => {
            if (player.position.x + player.width > p.position.x && player.position.x < p.position.x + p.width) {
                if (player.velocity.y > 0 && // ËêΩ‰∏ã‰∏≠
                    (player.position.y + player.height) >= p.position.y && // ÁèæÂú®„ÅÆË∂≥„Åå„ÇÅ„ÇäËæº„Çì„Åß„ÅÑ„Çã
                    (player.position.y + player.height - player.velocity.y) <= p.position.y // 1„Éï„É¨„Éº„É†Ââç„ÅØË∂≥„Åå‰∏ä„Å†„Å£„Åü
                ) {
                    player.velocity.y = 0;
                    player.position.y = p.position.y - player.height;
                }
            }
        });

        // „Åù„ÅÆ‰ªñ„ÅÆË°ùÁ™ÅÂà§ÂÆö
        obstacles.forEach(o => { if (player.position.x < o.position.x + o.width && player.position.x + player.width > o.position.x && player.position.y < o.position.y + o.height && player.position.y + player.height > o.position.y) gameState = 'gameOver'; });
        enemies.forEach((e, i) => { if (player.position.x < e.position.x + e.width && player.position.x + player.width > e.position.x && player.position.y < e.position.y + e.height && player.position.y + player.height > e.position.y) { if (player.velocity.y > 0 && player.position.y + player.height - player.velocity.y <= e.position.y) { enemies.splice(i, 1); score += 200; player.velocity.y = -JUMP_POWER / 2; } else { gameState = 'gameOver'; } } });
        if (gameState === 'playing') { coins.forEach(c => { if (c.active) { const dist = Math.hypot(player.position.x + player.width/2 - c.position.x, player.position.y+player.height/2 - c.position.y); if (dist < player.width / 2 + c.radius) { c.active = false; score += COIN_SCORE; } } }); }
        if (player.position.y > canvas.height + 100) gameState = 'gameOver';

        // „Ç¥„Éº„É´Âà§ÂÆö
        if (player.position.x > goal.position.x) { gameState = 'cleared'; }

        // 4. „Ç´„É°„É©„Å®„Ç™„Éñ„Ç∏„Çß„ÇØ„ÉàÁÆ°ÁêÜ
        if (player.position.x > scrollOffset + canvas.width / 3) scrollOffset = player.position.x - canvas.width / 3;
        if (player.position.x < scrollOffset) player.position.x = scrollOffset;
        generateObjects();
        platforms = platforms.filter(p => p.position.x + p.width > scrollOffset);
        clouds = clouds.filter(c => c.position.x - scrollOffset * 0.5 + c.size * 2 > 0); // ÁîªÈù¢Â§ñ„Å´Âá∫„ÅüÈõ≤„ÇíÂâäÈô§
        coins = coins.filter(c => c.position.x + c.radius > scrollOffset);
        enemies = enemies.filter(e => e.position.x + e.width > scrollOffset);
        obstacles = obstacles.filter(o => o.position.x + o.width > scrollOffset);
    }

    // --- ÊèèÁîªÂá¶ÁêÜ ---
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    drawBackground(scrollOffset); // ËÉåÊôØ„ÇíÊèèÁîª
    clouds.forEach(c => c.draw(scrollOffset)); // Èõ≤„ÇíÂ••„Å´ÊèèÁîª
    platforms.forEach(p => p.draw(scrollOffset));
    obstacles.forEach(o => o.draw(scrollOffset));
    coins.forEach(c => c.draw(scrollOffset));
    enemies.forEach(e => e.draw(scrollOffset));
    goal.draw(scrollOffset);
    player.draw(scrollOffset);
    drawScore();

    if (gameState === 'cleared') drawMessage('„ÇØ„É™„Ç¢ÔºÅ', 'Enter„Ç≠„Éº„Åæ„Åü„ÅØÂ∑¶„Éú„Çø„É≥„Åß„É™„Çπ„Çø„Éº„Éà', score);
    if (gameState === 'gameOver') drawMessage('„Ç≤„Éº„É†„Ç™„Éº„Éê„Éº', 'Enter„Ç≠„Éº„Åæ„Åü„ÅØÂ∑¶„Éú„Çø„É≥„Åß„É™„Çπ„Çø„Éº„Éà', score);
}

// --- „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº ---
window.addEventListener('keydown', ({ code }) => { if (gameState === 'playing') { switch (code) { case 'ArrowLeft': case 'KeyA': keys.left.pressed = true; break; case 'ArrowRight': case 'KeyD': keys.right.pressed = true; break; case 'Space': case 'ArrowUp': case 'KeyW': player.velocity.y = -JUMP_POWER; break; } } else { if (code === 'Enter') init(); } });
window.addEventListener('keyup', ({ code }) => { if (gameState !== 'playing') return; switch (code) { case 'ArrowLeft': case 'KeyA': keys.left.pressed = false; break; case 'ArrowRight': case 'KeyD': keys.right.pressed = false; break; } });

// GamepadÊé•Á∂ö/ÂàáÊñ≠„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
window.addEventListener("gamepadconnected", (e) => {
    console.log("Gamepad connected at index %d: %s. %d buttons, %d axes.",
        e.gamepad.index, e.gamepad.id, e.gamepad.buttons.length, e.gamepad.axes.length);
    gamepad = e.gamepad;
    gamepadConnected = true;
    showGamepadStatus("„Ç≥„É≥„Éà„É≠„Éº„É©„Éº„ÅåÊé•Á∂ö„Åï„Çå„Åæ„Åó„Åü", "success");
    debugGamepadInfo();
});

window.addEventListener("gamepaddisconnected", (e) => {
    console.log("Gamepad disconnected from index %d: %s",
        e.gamepad.index, e.gamepad.id);
    gamepad = null;
    gamepadConnected = false;
    showGamepadStatus("„Ç≥„É≥„Éà„É≠„Éº„É©„Éº„ÅåÂàáÊñ≠„Åï„Çå„Åæ„Åó„Åü", "error");
});

// „Ç≥„É≥„Éà„É≠„Éº„É©„ÉºÊé•Á∂ö„ÇíÊâãÂãï„Åß„ÉÅ„Çß„ÉÉ„ÇØ„Åô„ÇãÈñ¢Êï∞
function checkGamepadConnection() {
    const actualGamepads = debugGamepadInfo();
    if (actualGamepads.length > 0 && !gamepadConnected) {
        console.log("„Ç≥„É≥„Éà„É≠„Éº„É©„Éº„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„ÅüÔºÅÊé•Á∂öÁä∂ÊÖã„ÇíÊõ¥Êñ∞„Åó„Åæ„Åô„ÄÇ");
        gamepad = actualGamepads[0];
        gamepadConnected = true;
        showGamepadStatus("„Ç≥„É≥„Éà„É≠„Éº„É©„Éº„ÅåÊé•Á∂ö„Åï„Çå„Åæ„Åó„Åü", "success");
        return true;
    } else if (actualGamepads.length === 0 && gamepadConnected) {
        // Êé•Á∂ö„ÅåÂàá„Çå„ÅüÂ†¥Âêà
        console.log("„Ç≥„É≥„Éà„É≠„Éº„É©„Éº„ÅÆÊé•Á∂ö„ÅåÂàá„Çå„Åæ„Åó„Åü");
        gamepad = null;
        gamepadConnected = false;
        showGamepadStatus("„Ç≥„É≥„Éà„É≠„Éº„É©„Éº„ÅåÂàáÊñ≠„Åï„Çå„Åæ„Åó„Åü", "error");
        return false;
    }
    return false;
}

// „Éö„Éº„Ç∏Ë™≠„ÅøËæº„ÅøÊôÇ„Å´„Ç≥„É≥„Éà„É≠„Éº„É©„ÉºÁä∂ÊÖã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
window.addEventListener('load', () => {
    console.log("„Éö„Éº„Ç∏Ë™≠„ÅøËæº„ÅøÂÆå‰∫Ü - „Ç≥„É≥„Éà„É≠„Éº„É©„ÉºÁä∂ÊÖã„Çí„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠...");
    checkGamepadConnection();
    
    // ÂÆöÊúüÁöÑ„Å´„Ç≥„É≥„Éà„É≠„Éº„É©„ÉºÁä∂ÊÖã„Çí„ÉÅ„Çß„ÉÉ„ÇØÔºà2ÁßíÈñìÈöî„ÅßMac„ÅÆ‰∏çÂÆâÂÆö„Å™Êé•Á∂ö„Å´ÂØæÂøúÔºâ
    setInterval(checkGamepadConnection, 2000);
});

// „É¶„Éº„Ç∂„Éº„Åå„Éú„Çø„É≥„ÇíÊäº„Åó„Åü„Å®„Åç„Å´„Ç≥„É≥„Éà„É≠„Éº„É©„Éº„Çí„ÉÅ„Çß„ÉÉ„ÇØ
document.addEventListener('keydown', () => {
    if (!gamepadConnected) {
        checkGamepadConnection();
    }
});

// „Éû„Ç¶„Çπ„ÇØ„É™„ÉÉ„ÇØÊôÇ„Å´„ÇÇ„Ç≥„É≥„Éà„É≠„Éº„É©„Éº„Çí„ÉÅ„Çß„ÉÉ„ÇØ
document.addEventListener('click', () => {
    if (!gamepadConnected) {
        checkGamepadConnection();
    }
});

init();
animate();